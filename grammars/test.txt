FOREST toygrammar =

{ Noun phrases }
	SET mary:
		[s*] ; [np@1 .(num : sg; per : 3) 'mary'] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'm'].
	SET john:
		[s*] ; [np@1 .(num : sg; per : 3) 'john'] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'j'].
	SET himself:
		[s*@1] ; [s*@2] ;
		[np@2 .(case : acc; num : sg ; per : 3) 'himself'] ; [np!@1] ;
		[t@1 [et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t*]]]] [e!@1]] ;
		[t*@2] ; [e@2 $a] ; [e $b].
	SET cousinsof:
		[s*] ; [np [d 'the'] [np@1 .(num : pl) [n 'cousins'] [pp [p 'of'] [np* .(case : acc) ]]]] ;
		[t*] ; [e@1 .(num : pl) [unique $z] [t [et [eet 'cousinsof'] [e* .(case : acc)]] [e $z]]].

{ Verb phrases } 
	SET saw:
		[s@1@2 [np!@1 (case : nom).(num : &n ; per: &p) ] [vp@3 (num : &n; per: &p) [v 'saw'] [np!@2 (case: acc)]]] ;
		[t@1@2@3 [et [eet 'saw'] [e!@2 (case: acc)]] [e!@1 (case: nom)]].

{DERIV johnsawmary:
	saw
		@1:[john @1:[]]
		@2:[mary @1:[]]
		@3:[].}

DERIV cousins_features:
	saw
		@2:[john @1:[]]
		@1:[cousinsof @1:[]] + [mary @1:[]]
		@3:[].

{DERIV cousins_features_refl:
	saw
		@1+@2:[himself
			@1:[john @1:[]]
			@2:[cousinsof @1:[]]]
		@3:[].}

{FOREST cristinas_paper_with_features =

{ Reflexive sets }
	SET himself:
		[s*@1] ; [s*@2] ;
		[np@2 .(case : acc; num : sg ; per : 3) 'himself'] ; [np!@1] ;
		[t@1 [et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t*]]]] [e!@1]] ;
		[t*@2] ; [e@2 $a] ; [e $b].
	SET himself_cat:
		[s*@1] ; [s [np .(case : acc; num : sg ; per : 3) 'himself'] [s*@2]] ;
		[np@2 ''] ; [np!@1] ;
		[t@1 [et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t*]]]] [e!@1]] ; 
		[t*@2] ; [e@2 $a] ; [e $b].
	SET himself_ditransobj:
		[s*@1] ; [s*@2] ;
		[np@2 .(case : acc; num : sg ; per : 3) 'himself'] ; [np!@1] ;
		[et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t@1 [et*] [e!@1]]]]] ;
		[t*@2] ; [e@2 $a] ; [e $b].
	SET themselves:
		[s*@1] ; [s*@2] ;
		[np@2 .(case : acc; num : pl ; per : 3) 'themselves/eachother'] ; [np!@1] ;
		[t@1 [et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t*]]]] [e!@1]] ; 
		[t*@2] ; [e@2 $a] ; [e $b].
	SET themselves_cat:
		[s*@1] ; [s [np@2 .(case : acc; num : pl ; per : 3) 'themselves/eachother'] [s*@2]] ;
		[np ''] ; [np!@1] ;
		[t@1 [et [eetet 'refl/recp'] [eet [lambda $a] [et [lambda $b] [t*]]]] [e!@1]] ; 
		[t*@2] ; [e@2 $a] ; [e $b].

{ Noun phrases }
	SET johnmary:
		[s*] ; [np@1 .(num : pl; per : 3) 'john_and_mary'] ;
		[t*] ; [e@1 .(num : pl; per : 3) 'j_and_m'].
	SET johnmary_top:
		[s [np@1 .(num : pl; per : 3) 'john_and_mary'] [s*]] ; [np ''] ;
		[t*] ; [e@1 .(num : pl; per : 3) 'j_and_m'].
	SET mary:
		[s*] ; [np@1 .(num : sg; per : 3) 'mary'] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'm'].
	SET mary_top:
		[s [np@1 .(num : sg; per : 3) 'mary'] [s*]] ; [np ''] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'm'].
	SET john:
		[s*] ; [np@1 .(num : sg; per : 3) 'john'] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'j'].
	SET john_top:
		[s [np@1 .(num : sg; per : 3) 'john'] [s*]] ; [np ''] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'j'].
	SET bill:
		[s*] ; [np@1 .(num : sg; per : 3) 'bill'] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'b'].
	SET bill_top:
		[s [np@1 .(num : sg; per : 3) 'bill'] [s*]] ; [np ''] ;
		[t*] ; [e@1 .(num : sg; per : 3) 'b'].
	SET picsof:
		[s*] ; [np [d 'the'] [np@1 .(num : pl; per : 3) [n 'pics'] [pp [p 'of'] [np*]]]] ;
		[t*] ; [e@1 .(num : pl; per : 3) [unique $z] [t [et [eet 'picsof'] [e*]] [e $z]]].
	SET picsof_top:
		[s [np [d 'the'] [np@1 .(num : pl; per : 3) [n 'pics'] [pp [p 'of'] [np*]]]] [s*]] ; [np ''] ;
		[t*] ; [e@1 .(num : pl; per : 3) [unique $z [t [et [eet 'picsof'] [e*]]] [e $z]]].
	SET everyone:
		[s*] ; [np 'everyone'] ;
		[t [forall $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].
	SET everyone_top:
		[s [np 'everyone'] [s*]] ; [np ''] ;
		[t [forall $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].
	SET someone:
		[s*] ; [np 'someone'] ;
		[t [exists $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].
	SET someone_top:
		[s [np 'someone'] [s*]] ; [np ''] ;
		[t [exists $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].
	SET noone:
		[s*] ; [np 'noone'] ;
		[t [notexists $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].
	SET noone_top:
		[s [np 'noone'] [s*]] ; [np ''] ;
		[t [notexists $x [t [et 'person'] [e $x]] [t*]]] ; [e $x].

{ Verb phrases } 
	SET saw:
		[s@1@2 [np!@1 (case: nom) ] [vp@3 [v 'saw'] [np!@2 (case: acc)]]] ;
		[t@1@2@3 [et [eet 'saw'] [e!@2 (case: acc)]] [e!@1 (case: nom)]].
	SET likes:
		[s@1@2 [np!@1 (case: nom)] [vp@3 [v 'likes'] [np!@2 (case: acc)]]] ;
		[t@1@2@3 [et [eet 'like'] [e!@2 (case: acc)]] [e!@1 (case: nom)]].
	SET showed_subj:
		[s@1@2@3 [np!@1 (case: nom)] [vp [v 'showed'] [np!@2 (case: dat)] [np!@3 (case: acc)]]] ;
		[t@1@2@3 [et [eet [eeet 'showed'] [e!@3 (case: acc)]] [e!@2 (case: dat)]] [e!@1 (case: nom)]].
	SET showed_obj:
		[s@1@3 [np!@1@2 (case: nom)] [vp [v 'showed'] [np!@2] [np!@3]]] ;
		[t@1@3 [et@2 [eet [eeet 'showed'] [e!@3]] [e!@2]] [e!@1 (case: nom)]].}

{ Derivation trees are gathered one by one to avoid overwriting of features.
  Need to fix this - not a good solution. (Unification is destructive!) }

{DERIV johnsawmary:
	saw
		@1:[john @1:[]]
		@2:[mary (2;3;4;1) @1:[]]
		@3:[].}

{DERIV noonesawmary:
	saw
		@1:[noone]
		@2:[mary @1:[]]
		@3:[].}

{DERIV johnsawmary_top:
	saw
		@1:[john @1:[]]
		@2:[mary_top @1:[]]
		@3:[].}

{DERIV refl_john:
	saw
		@1+@2:[himself (2;1;3;4;5;6;7;8)
			@1:[john @1:[]]
			@2:[]]
		@3:[].}

{DERIV reflrecp_jm:
	saw
		@1+@2:[themselves 
			@1:[johnmary @1:[]]
			@2:[]]
		@3:[].}

{DERIV reflrecp_everyone:
	saw
		@1+@2:[themselves 
			@1:[everyone]
			@2:[]]
		@3:[].}

{DERIV refl_cat_john:
	saw
		@1+@2:[himself_cat 
			@1:[john @1:[]]
			@2:[]]
		@3:[].}

{DERIV refl_ditrans_subj1:
	showed_subj
		@1+@3:[himself 
			@1:[john @1:[]]
			@2:[]]
		@2:[bill @1:[]].}

{DERIV refl_ditrans_subj2:
	showed_subj
		@1+@2:[himself 
			@1:[john @1:[]]
			@2:[]]
		@3:[bill @1:[]].}

{DERIV refl_ditrans_obj:
	showed_obj
		@2+@3:[himself_ditransobj 
			@1:[bill @1:[]]
			@2:[]]
		@1:[john @1:[]].}
