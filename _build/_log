### Starting build.
# Target: mctag.ml.depends, tags: { extension:ml, file:mctag.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules mctag.ml > mctag.ml.depends # cached
# Target: parsed.ml.depends, tags: { extension:ml, file:parsed.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules parsed.ml > parsed.ml.depends # cached
# Target: derivation.ml.depends, tags: { extension:ml, file:derivation.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules derivation.ml > derivation.ml.depends # cached
# Target: argument.ml.depends, tags: { extension:ml, file:argument.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules argument.ml > argument.ml.depends # cached
# Target: tree.ml.depends, tags: { extension:ml, file:tree.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules tree.ml > tree.ml.depends # cached
# Target: unify.ml.depends, tags: { extension:ml, file:unify.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules unify.ml > unify.ml.depends # cached
# Target: unify.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:unify.cmo, file:unify.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o unify.cmo unify.ml # cached
# Target: utils.ml.depends, tags: { extension:ml, file:utils.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o utils.cmo utils.ml # cached
# Target: tree.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tree.cmo, file:tree.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o tree.cmo tree.ml # cached
# Target: treeset.ml.depends, tags: { extension:ml, file:treeset.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules treeset.ml > treeset.ml.depends # cached
# Target: links.ml.depends, tags: { extension:ml, file:links.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules links.ml > links.ml.depends # cached
# Target: links.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:links.cmo, file:links.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o links.cmo links.ml # cached
# Target: treeset.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:treeset.cmo, file:treeset.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o treeset.cmo treeset.ml # cached
# Target: argument.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:argument.cmo, file:argument.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o argument.cmo argument.ml # cached
# Target: derive.ml.depends, tags: { extension:ml, file:derive.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules derive.ml > derive.ml.depends # cached
# Target: derive.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:derive.cmo, file:derive.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o derive.cmo derive.ml # cached
# Target: forest.ml.depends, tags: { extension:ml, file:forest.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules forest.ml > forest.ml.depends # cached
# Target: forest.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:forest.cmo, file:forest.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o forest.cmo forest.ml # cached
# Target: derivation.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:derivation.cmo, file:derivation.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o derivation.cmo derivation.ml # cached
# Target: parsed.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parsed.cmo, file:parsed.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o parsed.cmo parsed.ml # cached
# Target: tagLexer.mll, tags: { extension:mll, file:tagLexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/local/bin/ocamllex.opt -q tagLexer.mll # cached
# Target: tagLexer.ml.depends, tags: { extension:ml, file:tagLexer.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules tagLexer.ml > tagLexer.ml.depends # cached
# Target: tagParser.mly.depends, tags: { extension:mly, file:tagParser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep '/usr/local/bin/ocamldep.opt -modules' tagParser.mly > tagParser.mly.depends # cached
# Target: tagParser.mly, tags: { byte, compile, extension:ml, extension:mly, file:tagParser.ml, file:tagParser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc /usr/local/bin/ocamlc.opt --infer tagParser.mly # cached
# Target: tagParser.mli.depends, tags: { extension:mli, file:tagParser.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules tagParser.mli > tagParser.mli.depends # cached
# Target: tagParser.cmi, tags: { byte, compile, extension:mli, file:tagParser.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o tagParser.cmi tagParser.mli # cached
# Target: tagLexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tagLexer.cmo, file:tagLexer.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o tagLexer.cmo tagLexer.ml # cached
# Target: mctag.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:mctag.cmo, file:mctag.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o mctag.cmo mctag.ml # cached
# Target: tagParser.ml.depends, tags: { extension:ml, file:tagParser.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules tagParser.ml > tagParser.ml.depends # cached
# Target: tagParser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tagParser.cmo, file:tagParser.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o tagParser.cmo tagParser.ml # cached
# Target: mctag.byte, tags: { byte, dont_link_with, extension:byte, file:mctag.byte, link, ocaml, program, quiet }
/usr/local/bin/ocamlc.opt unify.cmo utils.cmo tree.cmo links.cmo treeset.cmo argument.cmo derive.cmo forest.cmo derivation.cmo parsed.cmo tagParser.cmo tagLexer.cmo mctag.cmo -o mctag.byte # cached
# Compilation successful.
